import { NextPage } from "next";
import Head from "next/head";
import { Button, Input } from "antd";
import Lottie from "react-lottie-player";
import meowAnimation from "../../public/static/meow.json";
import { GlobalOutlined } from "@ant-design/icons";
import Link from "next/link";
import React, { useState } from "react";
import { useFormik } from "formik";
import { loginValidate } from "@/utils";
import { useRouter } from "next/router";
import { getSession, signIn, signOut } from "next-auth/react";

const LoginPage: NextPage = () => {
	const router = useRouter();
	const [formError, setFormError] = useState<String>("");
	const callbackUrl = `${process.env.NEXT_PUBLIC_SITE_URL}/admin`;
	const onSubmit = async () => {
		if (loginForm.isValid) {
			loginForm.setSubmitting(true);
			setFormError("");
			let status = await signIn("credentials", {
				redirect: false,
				email: loginForm.values.email,
				password: loginForm.values.password,
				callbackUrl: callbackUrl,
			});
			loginForm.resetForm();
			loginForm.setSubmitting(false);
			if (status.error != null && !status.ok) {
				setFormError(status.error);
			}
			if (status.ok) {
				router.replace(status.url);
			}
		}
	};

	async function handleGoogleSignin() {
		signIn("google", { callbackUrl: callbackUrl });
	}

	const loginForm = useFormik({
		initialValues: {
			email: "",
			password: "",
		},
		onSubmit,
		validate: loginValidate,
	});

	return (
		<>
			<Head>
				<title>Pirate Crawler | Login</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<section className="loginPage__Wrapper">
				<div className="loginForm__Wrapper">
					<div className="loginForm__banner">
						<Lottie animationData={meowAnimation} loop={true} play />
					</div>
					<div className="loginForm__content">
						<Link className="site-logo" href={"/"}>
							<GlobalOutlined />
							<span className="site-logo__text">PIRATE CRAWLER</span>
						</Link>
						<form onSubmit={loginForm.handleSubmit}>
							<Input
								type="email"
								size="large"
								name="email"
								placeholder="Email ex: jhon@example.com"
								className={`${loginForm.errors.email && loginForm.touched.email ? "error" : ""}`}
								value={loginForm.values.email}
								onChange={loginForm.handleChange}
							/>
							{loginForm.errors.email && loginForm.touched.email && (
								<span className="error msg">{loginForm.errors.email.toString()}</span>
							)}
							<Input.Password
								name="password"
								size="large"
								placeholder="Enter password"
								className={`${loginForm.errors.password && loginForm.touched.password ? "error" : ""}`}
								value={loginForm.values.password}
								onChange={loginForm.handleChange}
							/>
							{loginForm.errors.password && loginForm.touched.password && (
								<span className="error msg">{loginForm.errors.password.toString()}</span>
							)}
							<Button type="primary" block htmlType="submit" size="large" loading={loginForm.isSubmitting}>
								Login
							</Button>
							{formError && <span className="error msg">{formError}</span>}
						</form>
						<div className="loginForm__SSO">
							<Button block size="large" onClick={handleGoogleSignin}>
								<GoogleIcon /> Sign In with Google
							</Button>
						</div>
						<p className="loginForm__bottom">
							don't have an account yet? &nbsp; <Link href={"/auth/signup"}>Sign Up</Link>
						</p>
					</div>
				</div>
			</section>
		</>
	);
};

export default LoginPage;

const GoogleIcon = () => {
	return (
		<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" width="25px" height="25px">
			<path
				fill="#FFC107"
				d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"
			/>
			<path
				fill="#FF3D00"
				d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"
			/>
			<path
				fill="#4CAF50"
				d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"
			/>
			<path
				fill="#1976D2"
				d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571c0.001-0.001,0.002-0.001,0.003-0.002l6.19,5.238C36.971,39.205,44,34,44,24C44,22.659,43.862,21.35,43.611,20.083z"
			/>
		</svg>
	);
};

export async function getServerSideProps({ req }) {
	const session = await getSession({ req });
	if (session) {
		return {
			redirect: {
				destination: "/",
				permanant: false,
			},
		};
	}
	return {
		props: { session },
	};
}
